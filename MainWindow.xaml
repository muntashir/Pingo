<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic" mc:Ignorable="d" x:Class="Pingo.MainWindow"
        Title="Pingo - Idle" MinHeight="435" MinWidth="650" Height="435" Width="647" Icon="icon.ico" Loaded="MainWindow_Loaded" WindowStyle="None" ResizeMode="CanResizeWithGrip" AllowsTransparency="True" MouseLeftButtonDown="Window_MouseLeftButtonDown" BorderThickness="2">

    <Window.Resources>
        <Style x:Key="ProgressBarStyle1" TargetType="{x:Type ProgressBar}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            <Setter Property="BorderBrush" Value="#00000000"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Themes:ClassicBorderDecorator x:Name="TemplateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" BorderStyle="ThinPressed" Background="{TemplateBinding Background}">
                            <DockPanel x:Name="PART_Track" LastChildFill="False" Margin="0,0,2,2">
                                <Rectangle x:Name="PART_Indicator" Width="192" Fill="#FF00FD2E" RenderTransformOrigin="0.5,0.5"/>
                            </DockPanel>
                        </Themes:ClassicBorderDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#FFE6E6E6"/>
                                <Setter Property="Background" TargetName="Bd" Value="#FFE6E6E6"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#FFC1C1C1"/>
                                <Setter Property="Background" TargetName="Bd" Value="#FFC1C1C1"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="RepeatButtonStyle1" TargetType="{x:Type RepeatButton}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#FFE6E6E6"/>
                                <Setter Property="Background" TargetName="Bd" Value="#FFE6E6E6"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#FFC1C1C1"/>
                                <Setter Property="Background" TargetName="Bd" Value="#FFC1C1C1"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyleExit" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#FFFF2525"/>
                                <Setter Property="Background" TargetName="Bd" Value="#FFFF2525"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#FFFD0000"/>
                                <Setter Property="Background" TargetName="Bd" Value="#FFFD0000"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ListViewControlTemplate1" TargetType="{x:Type ListView}">
            <Themes:ClassicBorderDecorator x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" BorderStyle="Sunken" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource}">
                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </ScrollViewer>
            </Themes:ClassicBorderDecorator>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="True"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Window.Resources>

    <Window.TaskbarItemInfo>
        <TaskbarItemInfo ProgressValue="0" ProgressState="None"/>
    </Window.TaskbarItemInfo>

    <Border>
        <Border.Effect>
            <DropShadowEffect BlurRadius="5" Color="Black" Opacity="0.8" ShadowDepth="0.5" />
        </Border.Effect>

        <Grid Background="White">

            <Rectangle Fill="#FFF7F7F7" HorizontalAlignment="Right" Width="93"/>

            <ListView x:Name="lsvOutput" Margin="10,79,104,77" FontSize="14" MouseDoubleClick="lsvOutput_MouseDoubleClick" SelectionMode="Single" Background="#FFF7F7F7" Foreground="Black" BorderThickness="0">
                <ListView.Resources>
                    <Style TargetType="{x:Type GridViewColumnHeader}">
                        <Setter Property="BorderBrush" Value="#FFF7F7F7" />
                    </Style>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="BorderThickness" Value="0"/>
                    </Style>
                </ListView.Resources>
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="Hostname" DisplayMemberBinding="{Binding Hostname}"/>
                        <GridViewColumn Header="Status" DisplayMemberBinding="{Binding Status}"/>
                        <GridViewColumn Header="Last updated" DisplayMemberBinding="{Binding Timestamp}"/>
                    </GridView>
                </ListView.View>
                <ListView.ItemContainerStyle>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Status}" Value="Online">
                                <Setter Property="Background" Value="#FF00FD2E"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Status}" Value="Offline">
                                <Setter Property="Background" Value="#FFFF2525"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Status}" Value="Error">
                                <Setter Property="Background" Value="#FF8B8989"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
            </ListView>

            <TextBox x:Name="txtInput" BorderThickness="0" TextWrapping="Wrap" Text="Enter a hostname or IP" VerticalAlignment="Bottom" Margin="10,0,104,10" Height="53" AcceptsReturn="True" FontSize="14" Background="#FFF7F7F7" Foreground="Black" />

            <Button x:Name="btnEnter" VerticalAlignment="Bottom" RenderTransformOrigin="0.007,0.578" Height="63" Click="btnEnter_Click" IsDefault="True" FontSize="14" HorizontalAlignment="Right" Width="93" Background="#FFF7F7F7" Foreground="Black" Style="{DynamicResource ButtonStyle1}" Focusable="False">
                <TextBlock TextWrapping="Wrap" TextAlignment="Center"><Run Text="Enter"/></TextBlock>
            </Button>
            <Button x:Name="btnRefreshAll" Style="{DynamicResource ButtonStyle1}" Margin="0,0,0,236" Click="btnRefreshAll_Click" FontSize="14" HorizontalAlignment="Right" Width="93" Height="55" VerticalAlignment="Bottom" Background="#FFF7F7F7" Foreground="Black" Focusable="False">
                <TextBlock TextWrapping="Wrap" TextAlignment="Center"><Run Text="Refresh All"/></TextBlock>
            </Button>
            <Button x:Name="btnRefreshSelected" Focusable="False" Style="{DynamicResource ButtonStyle1}" Margin="0,0,0,291" Click="btnRefreshSelection_Click" FontSize="14" HorizontalAlignment="Right" Width="93" Height="55" VerticalAlignment="Bottom" Background="#FFF7F7F7" Foreground="Black">
                <TextBlock TextWrapping="Wrap" TextAlignment="Center"><Run Text="Refresh Selection"/></TextBlock>
            </Button>
            <Button x:Name="btnExport" VerticalAlignment="Bottom" Margin="0,0,0,77" Height="53" Style="{DynamicResource ButtonStyle1}" FontSize="14" Click="btnExport_Click" HorizontalAlignment="Right" Width="93" Background="#FFF7F7F7" Foreground="Black" Focusable="False">
                <TextBlock TextWrapping="Wrap" TextAlignment="Center"><Run Text="Export to CSV"/></TextBlock>
            </Button>
            <Button x:Name="btnDeleteSelected" Style="{DynamicResource ButtonStyle1}" VerticalAlignment="Bottom" Margin="0,0,0,184" Height="52" Click="btnDeleteSelection_Click" FontSize="14" HorizontalAlignment="Right" Width="93" Background="#FFF7F7F7" Foreground="Black" Focusable="False">
                <TextBlock TextWrapping="Wrap" TextAlignment="Center"><Run Text="Delete Selection"/></TextBlock>
            </Button>
            <Button x:Name="btnDeleteAll" Style="{DynamicResource ButtonStyle1}" VerticalAlignment="Bottom" Margin="0,0,0,130" Height="54" Click="btnClear_Click" FontSize="14" HorizontalAlignment="Right" Width="93" Background="#FFF7F7F7" Foreground="Black" Focusable="False">
                <TextBlock TextWrapping="Wrap" TextAlignment="Center"><Run Text="Delete All"/></TextBlock>
            </Button>

            <Label Content="Polling interval in minutes:" HorizontalAlignment="Left" Margin="10,45,0,0" FontSize="14" Height="29" VerticalAlignment="Top"/>
            <TextBox x:Name="txtInterval" Focusable="False" HorizontalAlignment="Left" Margin="190,47,0,0" TextWrapping="Wrap" Text="10" Width="30" TextChanged="txtInterval_TextChanged" IsReadOnly="True" BorderBrush="{x:Null}" FontSize="14" Height="26" VerticalAlignment="Top" Background="{x:Null}" Foreground="Black" Cursor="Arrow"/>
            <Button x:Name="btnTogglePolling" Content="Disable Polling" HorizontalAlignment="Left" Width="125" Margin="242,47,0,0" Style="{DynamicResource ButtonStyle1}" Click="btnTogglePolling_Click" FontSize="14" Height="26" VerticalAlignment="Top" Background="{x:Null}" Foreground="Black" Focusable="False"/>
            <Label x:Name="lblNextUpdate" Content="Next update in" HorizontalAlignment="Left" RenderTransformOrigin="0.864,0.952" Margin="372,45,0,0" FontSize="14" Height="29" VerticalAlignment="Top"/>

            <RepeatButton x:Name="btnMinus" Style="{StaticResource RepeatButtonStyle1}" FontFamily="Marlett" FontSize="8" Content="6" HorizontalAlignment="Left" Width="15" Margin="213,61,0,0" Click="btnMinus_Click" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Height="13" VerticalAlignment="Top" BorderBrush="{x:Null}" Background="{x:Null}" Focusable="False"/>
            <RepeatButton x:Name="btnPlus" Style="{StaticResource RepeatButtonStyle1}" FontFamily="Marlett" FontSize="8" Content="5" HorizontalAlignment="Left" Width="15" Margin="213,49,0,0" Click="btnPlus_Click" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Height="13" VerticalAlignment="Top" BorderBrush="{x:Null}" Background="{x:Null}" Focusable="False"/>

            <ProgressBar x:Name="progressBar" FontSize="14" Height="34" VerticalAlignment="Top" Background="#FFF7F7F7" BorderBrush="#FFF7F7F7" Foreground="#FF23FF00" Style="{DynamicResource ProgressBarStyle1}"/>
            <Label Content="Pingo" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Top" FontSize="18"/>
            <Button x:Name="btnExit" Style="{DynamicResource ButtonStyleExit}" Content="X" Background="{x:Null}" BorderBrush="{x:Null}" Click="btnExit_Click" FontSize="14" HorizontalAlignment="Right" Width="31" Height="25" VerticalAlignment="Top" Focusable="False"/>
            <Button x:Name="btnMinimize" Style="{DynamicResource ButtonStyle1}" Content="_" Background="{x:Null}" BorderBrush="{x:Null}" Click="btnMinimize_Click" FontSize="14" HorizontalAlignment="Right" Width="31" Height="25" VerticalAlignment="Top" Margin="0,0,62,0" Focusable="False"/>
            <Button x:Name="btnMaximize" Style="{DynamicResource ButtonStyle1}" Content="□" Background="{x:Null}" BorderBrush="{x:Null}" Click="btnMaximize_Click"  FontSize="14" HorizontalAlignment="Right" Width="31" Height="25" VerticalAlignment="Top" Margin="0,0,31,0" Focusable="False"/>

        </Grid>
    </Border>
</Window>